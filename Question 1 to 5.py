1. #If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
   #Find the sum of all the multiples of 3 or 5 below 1000
 
sum=0
mult_lst=[]
for num in range(1000):
    if num %3 == 0 or num %5 == 0:
        sum+=num
print(sum)

ANS:- 233168
   
2. #Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
   #1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
   #By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

first_num=1
second_num=1
fibo_num=0
sum=0

while fibo_num<4000000:
    fibo_num= first_num + second_num
    if fibo_num %2==0:
        sum=sum+fibo_num

    #for next iteration
    first_num=second_num
    second_num=fibo_num
print(sum)

3. #The prime factors of 13195 are 5, 7, 13 and 29.
   #What is the largest prime factor of the number 600851475143 ?
   
import math

def compute():
    n = 600851475143
    while True:
        p = smallest_prime_factor(n)
        if p < n:
            n //= p
        else:
            return str(n)


# Returns the smallest factor of n, which is in the range [2, n]. The result is always prime.
def smallest_prime_factor(n):
    assert n >= 2
    for i in range(2, int(math.sqrt(n) + 1)):
        if n % i == 0:
            return i
    return n  # n itself is prime

print(compute())   

#----
print("To Continue Below")

print("To Continue Below")

print("To Continue Below")

print("To Continue Below")
print("To Continue Below")
print("To Continue Below")
print("To Continue Below")
print("To Continue Below")

print("To Continue Below")

